<!DOCTYPE html>
<html>
    <head>
        <title>DJ Michael Toor</title>
        <!-- mobile screen adjustment -->
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- stylesheets -->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous"> 
        <link rel="stylesheet" href="/stylesheets/main.css">
        <link rel="stylesheet" href="/stylesheets/calendar.css">  
        <link rel="stylesheet" href="/stylesheets/options.css">  
        <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">

        <!-- calendar scripts -->
        <script src="https://yui-s.yahooapis.com/3.18.1/build/yui/yui-min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.1/jquery.min.js"></script>
    </head>
    <body>
        <nav id="navbar" class="navbar navbar-expand-sm fixed-top navbar-dark">
            <h2>GIGS ARCHIVE</h2>
            <ul class="navbar-nav ml-auto">
                <a class="nav-link " href="/display">DISPLAY</a>
                <a class="nav-link " href="/user_options">OPTIONS</a>
                <form action="/logout" method="GET">
                    <button type="login" class="btn btn-primary">LOGOUT</button>
                </form>
            </ul>
        </nav>
            <script>
                let gigs = <%- JSON.stringify(gigs) %>;
                let locations = <%- JSON.stringify(locations) %>;

                //searches if start date is in an array of objects. Returns the object
                function search(sDate, myArray){
                    for(let i=0; i < myArray.length; i++){
                        if(myArray[i].start_date === sDate){
                            return myArray[i];
                        }
                    }
                }

                //handles radio button responses for location insertion
                function insertLocationInfo(locationid){
                    let i = 0;
                    while(locations[i].id != locationid || i > locations.length){
                        i++;
                    }
                    document.getElementById("placeE").value = locations[i].place;
                    document.getElementById("addressE").value = locations[i].address;
                    document.getElementById("murlE").value = locations[i].map_url;
                    document.getElementById("deleteLocB").value = locationid;
                    document.getElementById("deleteLocB").style.display = "block";
                }

                //determines which modules are visible
                function moduleSelect(id){
                    const modules = ["gigsModule", "newLocationModule", "editLocationModule"];
                    for(let i=0; i < modules.length; i++){
                        if(modules[i] != id){
                            document.getElementById(modules[i]).style.display = "none";
                        }
                    }
                    document.getElementById(id).style.display = "block";

                    if(id == "gigsModule" && !document.getElementById("deleteB").value){
                        document.getElementById("deleteB").style.display = "none";
                    } else if(id == "gigsModule"){
                        document.getElementById("deleteB").style.display = "block";
                    } else {
                        document.getElementById("deleteB").style.display = "none";
                    }

                    if(id == "editLocationModule" && !document.getElementById("deleteLocB").value){
                        document.getElementById("deleteLocB").style.display = "none";
                    } else if(id == "editLocationModule"){
                        document.getElementById("deleteLocB").style.display = "block";
                    } else {
                        document.getElementById("deleteLocB").style.display = "none";
                    }
                }
            
                YUI().use("calendar", function (Y) {
                    let calendar = new Y.Calendar({
                        contentBox: "#gigsCalendar",
                        minimumDate: new Date(2016,7,1),
                        showPrevMonth: false,
                        showNextMonth: false
                    }).render();

                    // Get a reference to Y.DataType.Date
                    let dtdate = Y.DataType.Date;

                    // Listen to calendar's selectionChange event
                    calendar.on("selectionChange", (ev) => {
                        let startDate = dtdate.format(ev.newSelection[0], {format: "%m/%d/%y"});
                        var resultGig = search(startDate, gigs);

                        //clicked on existing gig date
                        if(resultGig != undefined){
                            Y.one("#stime").set('value', resultGig.start_time);
                            Y.one("#etime").set('value', resultGig.end_time);
                            Y.one("#event").set('value', resultGig.event);
                            Y.one("#sdate").set('value', resultGig.start_date);
                            Y.one("#edate").set('value', resultGig.end_date);
                            Y.one("#gigLocation" + resultGig.location_id).set('checked', 'checked');
                            Y.one("#editB").setHTML("Edit");
                            Y.one("#editB").set('value', resultGig.id);
                            Y.one("#deleteB").set('value', resultGig.id);
                            Y.one("#deleteB").set('style.display', 'block');
                        //clicked on empty date
                        } else {
                            Y.one("#edate").set('value', startDate);
                            Y.one("#editB").setHTML("Insert");
                            Y.one("#editB").set('value', 0);
                            Y.one("#deleteB").set('value', '');
                            Y.one("#deleteB").set('style.display', 'none');
                        }
                        Y.one("#sdate").set('value', startDate);
                    });
            
                    let rules = {};
            
                    //append each gig day into calendar rules
                    for (let i = 0; i < gigs.length; i++) {
                        let year = gigs[i].start_year;
                        let month = gigs[i].start_month;
                        let day = gigs[i].start_day;
            
                        if (typeof rules[year] != 'undefined') {
                            if(typeof rules[year][month] != 'undefined'){
                                rules[year][month][day] = {"all": "gig_day"};
                            } else {
                                rules[year][month] = {"all": ""};
                                rules[year][month][day] = {"all": "gig_day"};
                            }
                        } else {
                            rules[year] = {"all": ""};
                            rules[year][month] = {"all": ""};
                            rules[year][month][day] = {"all": "gig_day"};
                        }
                    }
            
                    //apply each gig day into the calendar
                    let filterFunction = (date, node, rules) => {
                        if (Y.Array.indexOf(rules, 'gig_day') >= 0) {
                            let day = node.getHTML();
                            let ydate = Y.DataType.Date,
                                output = ydate.format(date, {
                                format: "%m/%d/%y"
                            });
                            let i = 0;
            
                            while(i < gigs.length && gigs[i].start_date != output){
                                i++;
                            }
                            while (i < gigs.length && gigs[i].start_date == output){
                                //gigs are displayed differently for small screens
                                if($(window).width() < 500){
                                    // node.addClass("mobileContent");
                                    node.setHTML(
                                    "<div class='contentSmall'>" +
                                        "<br><li><a class='gigs' href='/archive/" + gigs[i].id + "'>" + gigs[i].event + "</a></li>" +
                                    "</div>" +
                                    "<li>" + day + "</li>"
                                    );
                                } else if($(window).width() < 751){
                                    node.setHTML(
                                    "<div class='content'>" +
                                        "<br><li><a class='gigs' href='/archive/" + gigs[i].id + "'>" + gigs[i].event + "</a></li>" +
                                    "</div>" +
                                    "<li>" + day + "</li>"
                                    );
                                } else {
                                    node.setHTML(
                                    "<div class='content'>" +
                                        "<br><li><a class='gigs' href='/archive/" + gigs[i].id + "'>" + gigs[i].place + "<br>(" + gigs[i].event + ")</a></li>" +
                                    "</div>" +
                                    "<li>" + day + "</li>"
                                    );
                                }
                                i++;
                            }
                        }
                    }
            
                    //updates the calendar at window size change
                    $(() => {
                        $(window).resize(() => {
                                //applies rules and filter to the calendar
                                calendar.set("customRenderer", {rules: rules, filterFunction: filterFunction});
                        }).resize();
                    });
            
                    //converts the header to uppercase
                    calendar.set("headerRenderer", (curDate) => {
                        let ydate = Y.DataType.Date,
                            output = ydate.format(curDate, {
                            format: "%B %Y"
                            }).toUpperCase();
                        return output;
                    });  
                }); 
            </script>
        <div class="row">
            <div class="col-lg-8 col-md-6" >
                <div class="container yui3-skin-gigs">
                    <div id="gigsCalendar"></div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6" id="rightElement">
                <div class="moduleButtons">
                    <button type="submit" class="moduleButton" id="gigsOpB" name="gigsOpB" onclick = "moduleSelect('gigsModule');">GIGS</button>
                    <button type="submit" class="moduleButton" id="newLocOpB" name="newLocOpB" onclick = "moduleSelect('newLocationModule');">NEW LOCATION</button>
                    <button type="submit" class="moduleButton" id="editLocOpB" name="editLocOpB" onclick = "moduleSelect('editLocationModule');">EDIT LOCATION</button>
                </div>
                <div>
                    <form action="/archive_options" method="POST" id="gigsModule">
                        <h3>GIGS:</h3>
                        <input class="form-control" type="text" id="event" name="event" placeholder="Event" required>
                        <label for="location">Select location or input new location details below:</label>
                        <div style="height:100px;overflow:auto;" id="location">
                            <% for (let i = 0; i < locations.length; i++) { %>   
                                <input type="radio" value="<%= locations[i].id %>" id="gigLocation<%= locations[i].id %>" name="location" required> <%= locations[i].place %></input><br>                              
                            <% } %>
                        </div>
                        <label for="sdate">Start date (select on calendar):</label>
                        <input class="form-control" type="text" id="sdate" name="sdate" pattern="[0-9]{2}/[0-9]{2}/[0-9]{2}" oninvalid="this.setCustomValidity('Date must be in form mm/dd/yy.')" required>
                        <label for="edate">End date:</label>
                        <input class="form-control" type="text" id="edate" name="edate" pattern="[0-9]{2}/[0-9]{2}/[0-9]{2}" oninvalid="this.setCustomValidity('Date must be in form mm/dd/yy.')" required>
                        <label for="stime">Start time:</label>
                        <input type="time" id="stime" name="stime" required><br>
                        <label for="etime">End time:</label>
                        <input type="time" id="etime" name="etime" required><br>
                        <button type="submit" class="btn btn-primary" id="editB" name="editB">Insert</button>
                    </form>
                    <form action="/archiveOptionsDelete" method="POST">
                        <button type="submit" class="btn btn-primary" id="deleteB" name="deleteB" value="">Delete</button>
                    </form>
                </div>
                <div>
                    <form action="/newLocation" method="POST" id="newLocationModule">
                        <h3>NEW LOCATION:</h3>
                        <label for="place">Place:</label>
                        <input class="form-control" type="text" id="place" name="place" required>
                        <label for="address">Address:</label>
                        <input class="form-control" type="text" id="address" name="address" required>
                        <label for="murl">Map URL:</label>
                        <input class="form-control" type="url" id="murl" name="murl" required>
                        <button type="submit" class="btn btn-primary" id="newLocB" name="newLocB">Insert</button>
                    </form>
                </div>   
                <div>
                    <form action="/editLocation" method="POST" id="editLocationModule">
                        <h3>EDIT LOCATION:</h3>
                        <div style="height:100px;overflow:auto;" id="location">
                            <% for (let i = 0; i < locations.length; i++) { %>   
                                <input type="radio" value="<%= locations[i].id %>" name="locationid" onclick = "insertLocationInfo(<%= locations[i].id %>);" required> <%= locations[i].place %></input><br>                              
                            <% } %>
                        </div>
                        <label for="place">Place:</label>
                        <input class="form-control" type="text" id="placeE" name="placeE" required>
                        <label for="address">Address:</label>
                        <input class="form-control" type="text" id="addressE" name="addressE" required>
                        <label for="murl">Map URL:</label>
                        <input class="form-control" type="url" id="murlE" name="murlE" required>
                        <p>Note: Cannot delete a location if a gig is dependent on it.</p>
                        <button type="submit" class="btn btn-primary" id="editLocB" name="editLocB">Edit</button>
                    </form>
                    <form action="/deleteLocation" method="POST">
                        <button type="submit" class="btn btn-primary" id="deleteLocB" name="deleteLocB" value="">Delete</button>
                    </form> 
                </div>        
            </div>
        </div>
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" crossorigin="anonymous"></script>
    </body>
</html>